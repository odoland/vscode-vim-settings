{
    "init var": {
        "scope": "go",
        "prefix": "vv",
        "body": [
            "${2:varName} := ${1:value}"
        ]
    },
    "Case default": {
        "scope": "go",
        "prefix": "def",
        "body": [
            "default:"
        ]
    },
    "Close": {
        "scope": "go",
        "prefix": "cl",
        "body": [
            "close(${0:closable})"
        ]
    },
    "Goroutine anonymous func": {
        "scope": "go",
        "prefix": "gofunc",
        "body": [
            "go func(){",
            "  $0",
            "}()"
        ]
    },
    "Slice Remove": {
        "scope": "go",
        "prefix": "sr",
        "body": [
            "${1:slice} = append(${1:slice}[:${2:index}], ${1:slice}[${2:index}+1:]...)"
        ]
    },
    "Defer anonymous func": {
        "scope": "go",
        "prefix": "defunc",
        "body": [
            "defer func() {",
            "  $0",
            "}()"
        ]
    },
    "if ok": {
        "scope": "go",
        "prefix": "ifok",
        "body": [
            "if ${1:value}, ok := $2; ok {",
            "  $0",
            "}"
        ]
    },
    "delete": {
        "scope": "go",
        "prefix": "del",
        "body": [
            "delete(${1:map}, \"${2:key}\")"
        ]
    },
    "append": {
        "scope": "go",
        "prefix": "ap",
        "body": [
            "${1:slice} = append(${1:slice}, ${0:element})"
        ]
    },
    "log.Printf": {
        "scope": "go",
        "prefix": "lo",
        "body": [
            "log.Printf(\"${1:%+v}\\n\", $0)"
        ]
    },
    "log.Printf err": {
        "scope": "go",
        "prefix": "le",
        "body": [
            "log.Printf(\"${1:%+v}\\n\", err)"
        ]
    },
    "fmt Sprintf": {
        "scope": "go",
        "prefix": "fms",
        "body": [
            "fmt.Sprintf(\"${1:%+v}\", $0)"
        ]
    },
    "if error": {
        "scope": "go",
        "prefix": "ier",
        "body": [
            "if err != nil {",
            "  $0",
            "}"
        ]
    },
    "errors.Is()": {
        "scope": "go",
        "prefix": "is",
        "body": [
            "if errors.Is(err, ${1:exec.ErrNotFound}) {",
            "  $0",
            "}"
        ]
    },
    "errors.As()": {
        "scope": "go",
        "prefix": "as",
        "body": [
            "var e ${1:*exec.Error}",
            "if errors.As(err, &e) {",
            "  $0",
            "}"
        ]
    },
    "Error with Stack": {
        "scope": "go",
        "prefix": "es",
        "body": [
            "errors.WithStack(err)"
        ]
    },
    "Error with Message": {
        "scope": "go",
        "prefix": "em",
        "body": [
            "errors.WithMessage(err, ${0:message})"
        ]
    },
    "Error with Messagef": {
        "scope": "go",
        "prefix": "emf",
        "body": [
            "errors.WithMessagef(err, ${1:format}, ${0:args})"
        ]
    },
    "Return Nil": {
        "scope": "go",
        "prefix": "rn",
        "body": [
            "return nil"
        ]
    },
    "Return Nil & err": {
        "scope": "go",
        "prefix": "rne",
        "body": [
            "return nil, err"
        ]
    },
    "Return err": {
        "scope": "go",
        "prefix": "re",
        "body": [
            "return err"
        ]
    },
    "Struct": {
        "scope": "go",
        "prefix": "st",
        "body": [
            "type ${1:structName} struct {",
            "  $0",
            "}"
        ]
    },
    "Struct Field": {
        "scope": "go",
        "prefix": "sf",
        "body": [
            "${1:fieldName} ${2:string}"
        ]
    },
    "Struct Tag": {
        "scope": "go",
        "prefix": "stt",
        "body": [
            "`${1:json}:\"${2:jsonFieldName}\"`"
        ]
    },
    "Interface": {
        "scope": "go",
        "prefix": "inte",
        "body": [
            "type ${1:interfaceName} interface {",
            "  $0",
            "}"
        ]
    },
    "sync.Mutex Lock and defer Unlock": {
        "scope": "go",
        "prefix": "lock",
        "body": [
            "${1:mu}.Lock()",
            "defer ${1:mu}.Unlock()"
        ]
    },
    "New Constructor Method": {
        "scope": "go",
        "prefix": "ne",
        "body": [
            "func New$1($2) *$1 {",
            "  $3",
            "  return &$1{",
            "    $0",
            "  }",
            "}"
        ]
    },
    "For Range": {
        "scope": "go",
        "prefix": "fr",
        "body": [
            "for _, ${1:v} := range ${2:values} {",
            "  $0",
            "}"
        ]
    },
    "For Range Chan": {
        "scope": "go",
        "prefix": "frr",
        "body": [
            "for ${1:v} := range ${2:channel} {",
            "  $0",
            "}"
        ]
    },
    "Non-blocking Channel Send": {
        "scope": "go",
        "prefix": "nb",
        "body": [
            "select {",
            "case $1 <- $0:",
            "default:",
            "}"
        ]
    }
}